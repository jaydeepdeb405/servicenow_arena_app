<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($rootScope, $scope, spUtil, $interval, $timeout) {
    /* widget controller */
    var c = this;

    spUtil.recordWatch($scope, "x_93700_arena_user", "sys_id=" + c.data.currentArenaUserID, function(response) {
        var newDifficulty = "";
        var newLevel = c.data.userLevelLabel;
        if (response.data.changes.indexOf("difficulty") !== -1) {
            newDifficulty = response.data.record.difficulty.display_value;
            if (response.data.changes.indexOf("level") !== -1)
                newLevel = response.data.record.level.display_value;
            $rootScope.$broadcast('arena_level_update', {});

            Notiflix.Notify.Init({
                width: '500px',
                position: 'right-top',
                fontSize: '1.2em'
            });
            Notiflix.Notify.Success("You've unlocked a level : " + newLevel + " - " + newDifficulty);

            c.server.update().then(function() {
                $scope.arenaLevels = c.data.arenaLevels;
            });
        }
    });

    c.home = function() {
        var gameScreen = {
            introSequence: false,
            gameHeading: true,
            mainMenu: true,
            gameLevels: false,
            quizPage: false,
            profilePage: false
        };
        $rootScope.$broadcast('gameScreen', gameScreen);
    };

    /////////////////////////Listener/////////////////////////
    $rootScope.$on('gameScreen', function(event, obj) {
        c.showGameLevels = obj.gameLevels;
    });

    $scope.arenaLevels = c.data.arenaLevels.map(function(level) {
        level.flipped = false;
        return level;
    });

    $scope.flipItem = function(itemIndex, isLocked) {
        if (isLocked == true) return;
        $scope.arenaLevels.forEach(function(level, index) {
            level.flipped = false;
            if (index === itemIndex) level.flipped = true;
        });
    }

    c.playLevel = function(level, difficulty) {
        if (difficulty.locked == true) return;

        sfx.playTik();

        $scope.playingLevel = true;
        $timeout(function() {
            var texts = ['On your marks', 'Set', 'Go!'];
            $scope.playingText = texts[0];
            $scope.second = 0;

            $interval(function(count) {
                $scope.playingText = texts[count];
                $scope.second = count;
            }, 1500, 2);

            $timeout(function() {
				$scope.playingText = texts[0];
                $scope.second = 0;
                $scope.playingLevel = false;
                var gameScreen = {
                    introSequence: false,
                    gameHeading: false,
                    mainMenu: false,
                    gameLevels: false,
                    quizPage: true,
                    profilePage: false,
                    level: level.value,
                    difficulty: difficulty.value,
                    challenge: false
                };
                $rootScope.$broadcast('gameScreen', gameScreen);
            }, 4500);
        }, 1000);

    };

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.rows {&#13;
  display: flex;&#13;
  flex-direction: row;&#13;
}&#13;
&#13;
.play-level-message {&#13;
  display         : flex;&#13;
  align-items     : center;&#13;
  justify-content : center;&#13;
  position        : fixed;&#13;
  color           : white;&#13;
  z-index         : 5;&#13;
  top             : 0;&#13;
  bottom          : 0;&#13;
  left            : 0;&#13;
  right           : 0;&#13;
  background-color: rgba(0, 0, 0, 0.6);&#13;
  overflow        : hidden;&#13;
}&#13;
&#13;
.traffic-lights {&#13;
  position        : fixed;&#13;
  top             : 0vh;&#13;
  display         : flex;&#13;
  height          : 100px;&#13;
  width           : 350px;&#13;
  border-radius   : 50px;&#13;
  align-items     : center;&#13;
  border          : 10px solid #cdcdd0;&#13;
  background-color: #384655;&#13;
  justify-content : space-evenly;&#13;
  animation: slide-from-top 1s cubic-bezier(0.4, 0, 0.2, 1) forwards;&#13;
}&#13;
&#13;
.traffic-lights div {&#13;
  height       : 50px;&#13;
  width        : 50px;&#13;
  border-radius: 50%;&#13;
}&#13;
&#13;
.traffic-lights div:nth-child(1) {&#13;
  background-color: #5d1a20;&#13;
  color           : red;&#13;
}&#13;
&#13;
.traffic-lights div:nth-child(2) {&#13;
  background-color: #5e631b;&#13;
  color           : yellow;&#13;
}&#13;
&#13;
.traffic-lights div:nth-child(3) {&#13;
  background-color: #1c6536;&#13;
  color           : #7cfc00;&#13;
}&#13;
&#13;
.glow {&#13;
  box-shadow: 0px 0px 50px;&#13;
}&#13;
&#13;
@keyframes slide-from-top {&#13;
  0% {&#13;
    top: 0vh;&#13;
  }&#13;
  100% {&#13;
    top: 35vh;&#13;
  }&#13;
}&#13;
&#13;
.play-level-message .slide-text {&#13;
  position : relative;&#13;
  top      : -100vh;&#13;
  animation: slide-from-inside 1.5s cubic-bezier(0.4, 0, 0.2, 1) 1s infinite;&#13;
}&#13;
&#13;
@keyframes slide-from-inside {&#13;
  0% {&#13;
    transform: translateZ(-100px);&#13;
    font-size: 1em;&#13;
    top      : 10vh;&#13;
  }&#13;
  100% {&#13;
    transform: translateZ(0);&#13;
    font-size: 4em;&#13;
    top      : 10vh;&#13;
  }&#13;
}&#13;
&#13;
.menu-space {&#13;
  height     : 180px;&#13;
  width      : 22%;&#13;
  margin     : 20px 1%;&#13;
  perspective: 1000px;&#13;
}&#13;
&#13;
.menu-item {&#13;
  height         : 100%;&#13;
  font-size      : 1.5em;&#13;
  text-align     : center;&#13;
  position       : relative;&#13;
  transition     : transform 0.6s;&#13;
  transform-style: preserve-3d;&#13;
  cursor         : pointer;&#13;
  margin         : 0 auto;&#13;
  background-color: #5cb85c;&#13;
  border          : 2px solid green;&#13;
}&#13;
&#13;
.menu-face {&#13;
  position           : absolute;&#13;
  height             : 100%;&#13;
  width              : 100%;&#13;
  backface-visibility: hidden;&#13;
}&#13;
&#13;
.menu-item .level {&#13;
  color           : white;&#13;
  box-shadow      : 0 5px 38px #819db0, 0 6px 12px #819db0;&#13;
  line-height     : 180px;&#13;
}&#13;
&#13;
.menu-item:hover .level {&#13;
  font-size: 1.4em;&#13;
}&#13;
&#13;
.menu-item .difficulty {&#13;
  display       : flex;&#13;
  flex-direction: column;&#13;
  transform     : rotateY(180deg);&#13;
  box-shadow    : 0 5px 38px #819db0, 0 6px 12px #819db0;&#13;
}&#13;
&#13;
.menu-item .difficulty div {&#13;
  position: relative;&#13;
  height       : 33.33%;&#13;
  padding-top  : 10px;&#13;
  line-height: 45px;&#13;
  font-size: 0.8em;&#13;
}&#13;
&#13;
.menu-item .difficulty div span{&#13;
  color: black;&#13;
}&#13;
&#13;
.menu-item .difficulty div img {&#13;
  height: 1.4em;&#13;
}&#13;
&#13;
.menu-item .difficulty div:hover span{&#13;
  font-size: 1.3em;&#13;
}&#13;
&#13;
.menu-item .difficulty div:nth-child(1) {&#13;
  background-color: $arenaGreen;&#13;
}&#13;
&#13;
.menu-item .difficulty div:nth-child(2) {&#13;
  background-color: $arenaYellow;&#13;
}&#13;
&#13;
.menu-item .difficulty div:nth-child(3) {&#13;
  background-color: $arenaRed;&#13;
}&#13;
&#13;
.menu-item.is-flipped {&#13;
  transform: rotateY(180deg);&#13;
}&#13;
&#13;
.locked {&#13;
  opacity: 0.6;&#13;
}&#13;
&#13;
.lock-icon {&#13;
  z-index : 5;&#13;
  position: absolute;&#13;
  height  : 100%;&#13;
  width   : 100%;&#13;
  left    : 0;&#13;
  padding : 20px;&#13;
}&#13;
&#13;
.difficulty .lock-icon {&#13;
  padding  : 0;&#13;
  font-size: 2em;&#13;
}&#13;
&#13;
@media only screen and (max-width: 768px) {&#13;
&#13;
  .levels-menu {&#13;
    width: 100vw;&#13;
  }&#13;
&#13;
  .rows {&#13;
    flex-direction: column;&#13;
  }&#13;
&#13;
  .menu-space {&#13;
    width: 98%;&#13;
    height: 65px;&#13;
    margin: 12px 1%;&#13;
  }&#13;
&#13;
  .menu-item .difficulty {&#13;
    flex-direction: row;&#13;
    transform     : rotateX(180deg);&#13;
  }&#13;
&#13;
  .menu-item .level {&#13;
    line-height: 60px;&#13;
  }&#13;
&#13;
  .menu-item .level:hover {&#13;
    font-size: 1em;&#13;
  }&#13;
&#13;
  .menu-face {&#13;
    box-shadow: none !important;&#13;
  }&#13;
&#13;
  .menu-item .difficulty div {&#13;
    width: 33.33%;&#13;
    height: 100%;&#13;
  }&#13;
&#13;
  .menu-item .difficulty div:hover {&#13;
    font-size: 0.8em;&#13;
  }&#13;
&#13;
  .menu-item.is-flipped {&#13;
    transform: rotateX(180deg);&#13;
  }&#13;
&#13;
  .lock-icon {&#13;
    padding: 0;&#13;
  }&#13;
&#13;
  .difficulty .lock-icon {&#13;
    padding  : 0;&#13;
    font-size: 2em;&#13;
  }&#13;
  &#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>arena_level_v2</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) { 

 }]]></link>
        <name>Arena Levels V2</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

    var userLevel = null;
    var userDifficulty = null;

    var currentUserID = gs.getUserID();
    var arenaUserGr = new GlideRecord('x_93700_arena_user');
    arenaUserGr.get("user", currentUserID);
    data.currentArenaUserID = arenaUserGr.getValue('sys_id') || '';
    userLevel = arenaUserGr.getValue('level');
    userDifficulty = arenaUserGr.getValue('difficulty');
    data.userLevelLabel = arenaUserGr.getDisplayValue('level');

    data.arenaLevels = [];

    // get level choices
    var choiceGr = new GlideRecord('sys_choice');
    choiceGr.addQuery("name", 'x_93700_arena_user');
    choiceGr.addQuery("element", "level");
    choiceGr.query();
    while (choiceGr.next()) {
        var arenaLevel = {};
        arenaLevel.label = choiceGr.getValue('label');
        arenaLevel.value = choiceGr.getValue('value');
        arenaLevel.locked = arenaLevel.value <= userLevel ? false : true;
        data.arenaLevels.push(arenaLevel);
    }

    // adding difficulties to levels
    var lockFlag = false;

    data.arenaLevels.forEach(function(level) {
        level.difficulties = [];

        var choiceGr = new GlideRecord('sys_choice');
        choiceGr.addQuery("name", 'x_93700_arena_user');
        choiceGr.addQuery("element", "difficulty");
        choiceGr.query();
        while (choiceGr.next()) {
            var difficulty = {};
            difficulty.label = choiceGr.getValue('label');
            difficulty.value = choiceGr.getValue('value');
            difficulty.icon = "arena-level-" + difficulty.value + ".svg";

            difficulty.locked = lockFlag;
            if (level.value == userLevel && difficulty.value == userDifficulty) {
                lockFlag = true;
            }
            level.difficulties.push(difficulty);
        }

    });

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>jaydeep</sys_created_by>
        <sys_created_on>2020-05-16 14:46:08</sys_created_on>
        <sys_id>96c443f1db789010b6db8e474896195d</sys_id>
        <sys_mod_count>145</sys_mod_count>
        <sys_name>Arena Levels V2</sys_name>
        <sys_package display_value="Arena" source="x_93700_arena">661460dfdbc5c010b6db8e47489619ae</sys_package>
        <sys_policy/>
        <sys_scope display_value="Arena">661460dfdbc5c010b6db8e47489619ae</sys_scope>
        <sys_update_name>sp_widget_96c443f1db789010b6db8e474896195d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-08-08 09:49:28</sys_updated_on>
        <template><![CDATA[<p id = "alertmsg" style ="color:darkorange; font-size: 30px"></p>
<div class="play-level-message" ng-if="playingLevel == true">
  <div class="traffic-lights">
    <div ng-style="second == 0 && {'background-color': 'red'}" ng-class="{'glow': second==0}" class="light"></div>
    <div ng-style="second == 1 && {'background-color': 'yellow'}" ng-class="{'glow': second==1}" class="light"></div>
    <div ng-style="second == 2 && {'background-color': '#7cfc00'}" ng-class="{'glow': second==2}" class="light"></div>
  </div>
  <div class="slide-text" ng-bind="playingText"></div>
</div>
<div ng-show="c.showGameLevels" ng-style="playingLevel == true && {'filter': 'blur(3px)'}" class="container levels-menu">
  <div class="rows">
    <div class="menu-space" ng-repeat="level in arenaLevels track by $index">
      <div class="menu-item" ng-class="{'is-flipped': level.flipped, 'locked': level.locked}" ng-click="flipItem($index, level.locked)">
        <img class="lock-icon" ng-src="arena-level-lock-icon.svg" ng-if="level.flipped == false && level.locked == true"/>
        <div ng-if="level.locked == false" class="menu-face level">{{level.label}}</div>
        <div class="menu-face difficulty">
          <div ng-class="{'locked': difficulty.locked}" ng-repeat="difficulty in level.difficulties" ng-click="c.playLevel(level,difficulty)">
            <img class="lock-icon" ng-src="arena-level-lock-icon.svg" ng-if="difficulty.locked == true"/>
            <img ng-if="difficulty.locked == false" ng-src="{{difficulty.icon}}"/>
            <span ng-if="difficulty.locked == false">{{difficulty.label}}</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
